{"version":3,"sources":["Main.js","Sidebar.js","App.js","index.js"],"names":["Main","activeNote","onUpdateNote","onEditField","key","value","Date","now","className","type","id","title","onChange","e","target","autoFocus","placeholder","body","Sidebar","notes","onAddNote","onDeleteNote","setActiveNote","sortedNotes","sort","a","b","lastModified","onClick","map","note","substr","toLocaleDateString","hour","minute","App","useState","localStorage","JSON","parse","setNotes","useEffect","setItem","stringify","newNote","uuid","idToDelete","filter","find","updateNote","updatedNotesArr","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAuCeA,MArCf,YAA6C,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACpBC,EAAc,SAACC,EAAKC,GAAW,IAAD,EAClCH,EAAa,2BACRD,GADO,uBAETG,EAAMC,GAFG,6BAGIC,KAAKC,OAHT,MAOd,OAAKN,EAIE,sBAAKO,UAAU,WAAf,UACL,sBAAKA,UAAU,qBAAf,UACE,uBACEC,KAAK,OACLC,GAAG,QACHL,MAAOJ,EAAWU,MAClBC,SAAU,SAACC,GAAD,OAAOV,EAAY,QAASU,EAAEC,OAAOT,QAC/CU,WAAS,IACX,0BACEL,GAAG,OACHM,YAAY,0JACZX,MAAOJ,EAAWgB,KAClBL,SAAU,SAACC,GAAD,OAAOV,EAAY,OAAQU,EAAEC,OAAOT,aAGlD,sBAAKG,UAAU,wBAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BP,EAAWU,QAC1C,cAAC,IAAD,CAAeH,UAAU,mBAAzB,SACGP,EAAWgB,aArBT,qBAAKT,UAAU,iBAAf,kFCwBIU,MApCf,YAMI,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,UACAC,EAGC,EAHDA,aACApB,EAEC,EAFDA,WACAqB,EACC,EADDA,cAEMC,EAAcJ,EAAMK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,aAAeF,EAAEE,gBAG5D,OAAO,sBAAKnB,UAAU,cAAf,UACL,sBAAKA,UAAU,qBAAf,UACE,qFACA,wBAAQoB,QAASR,EAAjB,iEAEF,qBAAKZ,UAAU,oBAAf,SACGe,EAAYM,KAAI,SAACC,GAAD,OACf,cAD2B,CAC3B,OAAKtB,UAAS,2BAAsBsB,EAAKpB,KAAOT,GAAc,UAC5D2B,QAAS,kBAAMN,EAAcQ,EAAKpB,KADpC,UAEE,sBAAKF,UAAU,qBAAf,UACE,iCAASsB,EAAKnB,QACd,wBAAQiB,QAAS,kBAAMP,EAAaS,EAAKpB,KAAzC,2DAEF,4BAAIoB,EAAKb,MAAQa,EAAKb,KAAKc,OAAO,EAAG,KAAO,QAC5C,wBAAOvB,UAAU,YAAjB,uIACyB,IAAIF,KAAKwB,EAAKH,cAAcK,mBAAmB,QAAS,CAC/EC,KAAM,UACNC,OAAQ,2B,OCiDLC,MArEf,WAAe,MAWaC,mBACxBC,aAAalB,MAAQmB,KAAKC,MAAMF,aAAalB,OAAS,IAZ3C,mBAWNA,EAXM,KAWCqB,EAXD,OAcuBJ,oBAAS,GAdhC,mBAcNnC,EAdM,KAcMqB,EAdN,KAqDb,OArCAmB,qBAAU,WACRJ,aAAaK,QAAQ,QAASJ,KAAKK,UAAUxB,MAC5C,CAACA,IAoCF,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CACEW,MAAOA,EACPC,UArCY,WAChB,IAAMwB,EAAU,CACdlC,GAAImC,MACJlC,MAAO,oGACPM,KAAM,GACNU,aAAcrB,KAAKC,OAGrBiC,EAAS,CACPI,GADM,mBACMzB,MA6BVE,aAbe,SAACyB,GACpBN,EAASrB,EAAM4B,QAAO,SAACjB,GAAD,OAAUA,EAAKpB,KAAOoC,OAaxC7C,WAAYA,EACZqB,cAAeA,IACjB,cAAC,EAAD,CACErB,WAZGkB,EAAM6B,MAAK,SAAClB,GAAD,OAAUA,EAAKpB,KAAOT,KAapCC,aA9Be,SAAC+C,GACpB,IAAMC,EAAkB/B,EAAMU,KAAI,SAACC,GACjC,OAAIA,EAAKpB,KAAOuC,EAAWvC,GAClBuC,EAGFnB,KAGTU,EAASU,UC5CbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.931206f5.chunk.js","sourcesContent":["import ReactMarkdown from \"react-markdown\" // Для использование в тексте Mardown cmd - \"npm install react-markdown\"\r\n\r\nfunction Main({ activeNote, onUpdateNote }) {\r\n  const onEditField = (key, value) => {\r\n    onUpdateNote({\r\n      ...activeNote,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    });\r\n  };\r\n\r\n  if (!activeNote)\r\n    return <div className=\"no-active-note\">Нету записей</div>;\r\n\r\n\r\n  return <div className=\"app-main\">\r\n    <div className=\"app-main-note-edit\">\r\n      <input\r\n        type=\"text\"\r\n        id=\"title\"\r\n        value={activeNote.title}\r\n        onChange={(e) => onEditField(\"title\", e.target.value)}\r\n        autoFocus />\r\n      <textarea\r\n        id=\"body\"\r\n        placeholder=\"Поле для ввода ваших записей...\"\r\n        value={activeNote.body}\r\n        onChange={(e) => onEditField(\"body\", e.target.value)}\r\n      />\r\n    </div>\r\n    <div className=\"app-main-note-preview\">\r\n      <h1 className=\"preview-title\">{activeNote.title}</h1>\r\n      <ReactMarkdown className=\"markdown-preview\">\r\n        {activeNote.body}\r\n      </ReactMarkdown>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default Main;","function Sidebar({\r\n  notes,\r\n  onAddNote,\r\n  onDeleteNote,\r\n  activeNote,\r\n  setActiveNote\r\n}) {\r\n  const sortedNotes = notes.sort((a, b) => b.lastModified - a.lastModified);\r\n\r\n\r\n  return <div className=\"app-sidebar\">\r\n    <div className=\"app-sidebar-header\">\r\n      <h1>Skaylife Блокнот</h1>\r\n      <button onClick={onAddNote}>Добавить</button>\r\n    </div>\r\n    <div className=\"app-sidebar-notes\">\r\n      {sortedNotes.map((note) => ( // Вывод записей \r\n        <div className={`app-sidebar-note ${note.id === activeNote && \"active\"}`}\r\n          onClick={() => setActiveNote(note.id)}>\r\n          <div className=\"sidebar-note-title\">\r\n            <strong>{note.title}</strong>\r\n            <button onClick={() => onDeleteNote(note.id)}>Удалить</button>\r\n          </div>\r\n          <p>{note.body && note.body.substr(0, 100) + \"...\"}</p>\r\n          <small className=\"note-meta\">\r\n            Последняя модификация {new Date(note.lastModified).toLocaleDateString(\"en-GB\", {\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n          })}\r\n          </small>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default Sidebar;","import { useEffect, useState } from \"react\"; // Полдюкчения состояний, благодаря этому можно перехватыватывать состояния\nimport uuid from \"react-uuid\"; // Export модуля для генерации id cmd - \"npm install react-uuid\"\nimport './App.css';\nimport Main from './Main';\nimport Sidebar from './Sidebar';\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\n\nfunction App() {\n  // const [notes,\n  // setNotes] = useState(JSON.parse(localStorage.notes) || []); // Сохранение данных, чтоб после обновление страници все осталось НЕ РАБОТАЕТ, возможно из-за браузера\n  //   setNotes] = useState([]); //Массив с перваченными даннными\n  // const [activeNote,\n  //   setActiveNote] = useState(false);\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"notes\", JSON.stringify(notes));\n  // }, [notes]);\n\n  const [notes, setNotes] = useState(\n    localStorage.notes ? JSON.parse(localStorage.notes) : []\n  );\n  const [activeNote, setActiveNote] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Безымянная запись\",\n      body: \"\",\n      lastModified: Date.now()\n    };\n\n    setNotes([\n      newNote, ...notes\n    ])\n  };\n\n  const onUpdateNote = (updateNote) => {\n    const updatedNotesArr = notes.map((note) => {\n      if (note.id === updateNote.id) {\n        return updateNote;\n      }\n\n      return note;\n    });\n\n    setNotes(updatedNotesArr);\n  }\n\n  const onDeleteNote = (idToDelete) => {\n    setNotes(notes.filter((note) => note.id !== idToDelete));\n  }\n\n  const getActiveNote = () => {\n    return notes.find((note) => note.id === activeNote);\n  }\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        notes={notes}\n        onAddNote={onAddNote}\n        onDeleteNote={onDeleteNote}\n        activeNote={activeNote}\n        setActiveNote={setActiveNote} />\n      <Main\n        activeNote={getActiveNote()}\n        onUpdateNote={onUpdateNote}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}